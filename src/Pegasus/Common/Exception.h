//%/////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2000, 2001, 2002 BMC Software, Hewlett-Packard Company, IBM,
// The Open Group, Tivoli Systems
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// THE ABOVE COPYRIGHT NOTICE AND THIS PERMISSION NOTICE SHALL BE INCLUDED IN
// ALL COPIES OR SUBSTANTIAL PORTIONS OF THE SOFTWARE. THE SOFTWARE IS PROVIDED
// "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//==============================================================================
//
// Author: Mike Brasher (mbrasher@bmc.com)
//
// Modified By: Nag Boranna, Hewlett-Packard Company (nagaraja_boranna@hp.com)
//              Karl Schopmeyer (k.schopmeyer@opengroup.org)
//              Jenny Yu, Hewlett-Packard Company (jenny_yu@hp.com)
//              Carol Ann Krug Graves, Hewlett-Packard Company
//                (carolann_graves@hp.com)
//              Roger Kumpf, Hewlett-Packard Company (roger_kumpf@hp.com)
//
//%/////////////////////////////////////////////////////////////////////////////

#ifndef Pegasus_Exception_h
#define Pegasus_Exception_h

#include <Pegasus/Common/Config.h>
#include <Pegasus/Common/String.h>
#include <Pegasus/Common/CIMStatusCode.h>
#include <Pegasus/Common/Linkage.h>

#include <cstring>

PEGASUS_NAMESPACE_BEGIN

// REVIEW: these classes need a major restructuring. This has become the
// REVIEW: dumping ground for exception classes.

// ATTN this documentation is incomplete

/** Class Exception

<p>The <tt>Exception</tt> class is the parent class for all
exceptions that can be generated by any component of the
Pegasus infrastructure. It includes not only the CIM exceptions
that are defined by the DMTF, but also various exceptions that
may occur during the processing of functions called by clients
and providers.</p>
*/
class PEGASUS_COMMON_LINKAGE Exception
{
public:

    Exception(const String& message);

    Exception(const char* message);

    ~Exception();

    const String& getMessage() const { return _message; }

protected:

    String _message;
};


// ATTN: P3  KS documentation Required
class PEGASUS_COMMON_LINKAGE OutOfBounds : public Exception
{
public:

    static const char MSG[];

    OutOfBounds() : Exception(MSG) { }
};

// ATTN: P3  KS documentation Required
class PEGASUS_COMMON_LINKAGE AlreadyExists : public Exception
{
public:

    static const char MSG[];

    AlreadyExists(const String& x = String()) : Exception(MSG + x) { }
};

// ATTN: P3  KS documentation Required
class PEGASUS_COMMON_LINKAGE IllegalName : public Exception
{
public:

    static const char MSG[];

    IllegalName(const String& name = String::EMPTY) : Exception(MSG + String(": ") + name) { }
};

// ATTN: P3  KS documentation Required
class PEGASUS_COMMON_LINKAGE IllegalNamespaceName : public Exception
{
public:

    static const char MSG[];

    IllegalNamespaceName(const String& name = String::EMPTY) : Exception(MSG + String(": ") + name) { }
};

// ATTN: P3  KS documentation Required
class PEGASUS_COMMON_LINKAGE UninitializedHandle : public Exception
{
public:

    static const char MSG[];

    UninitializedHandle() : Exception(MSG) { }
};

class PEGASUS_COMMON_LINKAGE UninitializedObject : public Exception
{
public:

    static const char MSG[];

    UninitializedObject() : Exception(MSG) { }
};

// ATTN: P3  KS documentation Required
class PEGASUS_COMMON_LINKAGE AddedReferenceToClass : public Exception
{
public:

    static const char MSG[];

    AddedReferenceToClass(const String& className)
	: Exception(MSG + className) { }
};

// ATTN: P3  KS documentation Required
class PEGASUS_COMMON_LINKAGE TruncatedCharacter : public Exception
{
public:

    static const char MSG[];

    TruncatedCharacter() : Exception(MSG) { }
};

// ATTN: P3  KS documentation Required
class PEGASUS_COMMON_LINKAGE ExpectedReferenceValue : public Exception
{
public:

    static const char MSG[];

    ExpectedReferenceValue() : Exception(MSG) { }
};

// ATTN: P3  KS documentation Required
class PEGASUS_COMMON_LINKAGE MissingReferenceClassName : public Exception
{
public:

    static const char MSG[];

    MissingReferenceClassName() : Exception(MSG) { }
};

// ATTN: P3  KS documentation Required
class PEGASUS_COMMON_LINKAGE TypeMismatch : public Exception
{
public:

    static const char MSG[];

    TypeMismatch() : Exception(MSG) { }
};

// ATTN: P3  KS documentation Required
class PEGASUS_COMMON_LINKAGE CIMValueInvalidType : public Exception
{
public:

    static const char MSG[];

    CIMValueInvalidType() : Exception(MSG) { }
};


// ATTN: P3  KS documentation Required
class PEGASUS_COMMON_LINKAGE DynamicCastFailed : public Exception
{
public:

    static const char MSG[];

    DynamicCastFailed() : Exception(MSG) { }
};

class PEGASUS_COMMON_LINKAGE BadDateTimeFormat : public Exception
{
public:

    static const char MSG[];

    BadDateTimeFormat() : Exception(MSG) { }
};

class PEGASUS_COMMON_LINKAGE IncompatibleTypes : public Exception
{
public:

    static const char MSG[];

    IncompatibleTypes() : Exception(MSG) { }
};

class PEGASUS_COMMON_LINKAGE IllformedObjectName : public Exception
{
public:

    static const char MSG[];

    IllformedObjectName(const String& instanceName)
	: Exception(MSG + instanceName) { }
};

class PEGASUS_COMMON_LINKAGE BindFailedException : public Exception
{
public:

    static const char MSG[];

    BindFailedException(const String& message) : Exception(MSG + message) { }
};

class PEGASUS_COMMON_LINKAGE InvalidLocatorException : public Exception
{
public:

    static const char MSG[];

    InvalidLocatorException(const String& locator) : Exception(MSG + locator) { }
};

class PEGASUS_COMMON_LINKAGE CannotCreateSocketException : public Exception
{
public:

    static const char MSG[];

    CannotCreateSocketException() : Exception(MSG) { }
};

class PEGASUS_COMMON_LINKAGE CannotConnectException : public Exception
{
public:

    static const char MSG[];

    CannotConnectException(const String& locator) : Exception(MSG + locator) { }
};

class PEGASUS_COMMON_LINKAGE UnexpectedFailureException : public Exception
{
public:

    static const char MSG[];

    UnexpectedFailureException() : Exception(MSG) { }
};

class PEGASUS_COMMON_LINKAGE AlreadyConnectedException: public Exception
{
public:

    static const char MSG[];

    AlreadyConnectedException() : Exception(MSG) { }
};

class PEGASUS_COMMON_LINKAGE NotConnectedException: public Exception
{
public:

    static const char MSG[];

    NotConnectedException() : Exception(MSG) { }
};

class PEGASUS_COMMON_LINKAGE ConnectionTimeoutException: public Exception
{
public:

    static const char MSG[];

    ConnectionTimeoutException() : Exception(MSG) { }
};

class PEGASUS_COMMON_LINKAGE SSLException: public Exception
{
public:

    static const char MSG[];

    SSLException(const String& message)
       : Exception(MSG + message) { }
};


class CIMExceptionRep;

/** The CIMException defines the CIM exceptions that are formally defined in
    the CIM Operations over HTTP specification.
*/
class PEGASUS_COMMON_LINKAGE CIMException : public Exception
{
public:

    CIMException(
	CIMStatusCode code = CIM_ERR_SUCCESS,
	const String& message = String::EMPTY);

    CIMException(const CIMException & cimException);

    virtual ~CIMException();

    CIMException& operator=(const CIMException & cimException);

    CIMStatusCode getCode() const;

protected:

    CIMExceptionRep * _rep;
};


PEGASUS_NAMESPACE_END

#endif /* Pegasus_Exception_h */
