//%2006////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2000, 2001, 2002 BMC Software; Hewlett-Packard Development
// Company, L.P.; IBM Corp.; The Open Group; Tivoli Systems.
// Copyright (c) 2003 BMC Software; Hewlett-Packard Development Company, L.P.;
// IBM Corp.; EMC Corporation, The Open Group.
// Copyright (c) 2004 BMC Software; Hewlett-Packard Development Company, L.P.;
// IBM Corp.; EMC Corporation; VERITAS Software Corporation; The Open Group.
// Copyright (c) 2005 Hewlett-Packard Development Company, L.P.; IBM Corp.;
// EMC Corporation; VERITAS Software Corporation; The Open Group.
// Copyright (c) 2006 Hewlett-Packard Development Company, L.P.; IBM Corp.;
// EMC Corporation; Symantec Corporation; The Open Group.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// THE ABOVE COPYRIGHT NOTICE AND THIS PERMISSION NOTICE SHALL BE INCLUDED IN
// ALL COPIES OR SUBSTANTIAL PORTIONS OF THE SOFTWARE. THE SOFTWARE IS PROVIDED
// "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//==============================================================================
//
//%/////////////////////////////////////////////////////////////////////////////

#ifndef _Pegasus_Common_Executor_h
#define _Pegasus_Common_Executor_h

#include <Pegasus/Common/Config.h>
#include <Pegasus/Common/MessageLoader.h>
#include <Pegasus/Common/AnonymousPipe.h>
#include <Pegasus/Common/Linkage.h>
#include <Pegasus/Common/SessionKey.h>
#include <Executor/Defines.h>
#include <cstdio>

PEGASUS_NAMESPACE_BEGIN

class PEGASUS_COMMON_LINKAGE Executor
{
public:

    static void setSock(int sock);

    /** Return zero if the executor is present.
    */
    static int detectExecutor();

    static int ping();

    static FILE* openFile(
        const char* path,
        int mode);

    static int renameFile(
        const char* oldPath,
        const char* newPath);

    static int removeFile(
        const char* path);

    static int startProviderAgent(
        const SessionKey& sessionKey,
        const char* module, 
        int uid,
        int gid, 
        int& pid,
        SessionKey& providerAgentSessionKey,
        AnonymousPipe*& readPipe,
        AnonymousPipe*& writePipe);

    static int daemonizeExecutor();

    static int waitPid(
        int pid);

    static int authenticatePassword(
        const char* username,
        const char* password,
        SessionKey& sessionKey);

    static int validateUser(
        const char* username);

    /** Start authenticating the given *user* using the "local authentication"
        algorithm. A file containing a secret token is created on the local 
        file system. The file is only reabable by the given user. The caller 
        should pass the *path* of this file to the client, who will attempt to 
        read the secret token from the file and return it to the server. This 
        token and the session key generated by this function should then be 
        passed to authenticateLocal().
    */
    static int challengeLocal(
        const char* user,
        char challenge[EXECUTOR_BUFFER_SIZE],
        SessionKey& sessionKey);

    /** Authenticating the given *user* using the "local authentication"
        algorithm. The secret token is read from the file created by 
        challengeLocal(). If it matches the *token* argument, then the
        authentication is successful (returns zero).
    */
    static int authenticateLocal(
        const SessionKey& sessionKey,
        const char* challengeResponse);

    /** Generate a new sesion key for the given user. This method will be
        eliminated as soon as the SSL certificate authentication scheme is
        moved into the executor.
    */
    static int newSessionKey(
        const char username[EXECUTOR_BUFFER_SIZE],
        SessionKey& sessionKey);

    /** Delete an existing session key.
    */
    static int deleteSessionKey(
        const SessionKey& sessionKey);

private:
    // Private to prevent instantiation.
    Executor();
};

PEGASUS_NAMESPACE_END

#endif /* _Pegasus_Common_Executor_h */
