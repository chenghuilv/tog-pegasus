CLI(1)                                                                  CLI(1)



[1mNAME[0m
       CLI - command line WBEM Client

[1mSYNOPSIS[0m
       [1mCLI [command] [object] [option] [4m[22moption[24m [4moption[24m [1m[" [4m[22mf1[24m [4mf2[24m [1m..."][0m

[1mAVAILABILITY[0m
       All platforms that support the Pegasus CIMOM


[1mDESCRIPTION[0m
       [4mCLI[24m is a command line test tool for executing CIM client operations. It
       implements all of the DMTF CIM operations except  for  the  modify  and
       create  class/instance operations and includes several other operations
       that are useful in testing including getting all namespaces and enumer-
       ating all instances in a namespace.

       Each  execution  of  CLI invokes a CIM Operation with the corresponding
       command parameters equivalent to the CIM Operations defined in the  CIM
       Operations over HTTP specification.  In addition to the basic CIM Oper-
       ations defined in the specification, this tool implements a  number  of
       other specific operations that support testing and querying CIM servers
       including

        enumerate namespaces (ns) - Returns a list of the namespaces available
       from the CIMOM.
        enumerate  all instance names (niall) - Returns a list of all instance
       names in the defined namespace.

       The format of this command is generally:

       CLI [Operation] [object] [option] [extra parameters]


       [Operation] defines the  operation to be executed. CLI executes all  of
       the DMTF Cim Operatioons (ex. getclass)
                   and a  set  of  compound  operation  (enumeratenamespaces).
                   There  are two forms for each Operation, a short form typi-
                   cally two characters (i.e. gc) and the long form  which  is
                   the full name of the operation (i.e. getclass).

       [object]  The name of the object input with the command. This parameter
       is operation dependent.
                   For  example,  with  the getClass operation the object is a
                   class name.  With the getinstance command the object is  an
                   objectname.  Note  that some of the commands do not require
                   an object.   Thus, for example  the  [object]  is  optional
                   with  the  enumerateClasses  operation  as  it  is with the
                   equivalent  enumerateClassNames CIM operation.

       [option...] Options are identified on the command line with the - or --
                   notation.  There are three types of options:

                   1. A set of options that are universal and modify or define
                   the execution of the command or the  form  of  the  return.
                   This  includes  options  like setting the output format for
                   object responses or requesting only summary operation.   2.
                   A  set of options that represent the optional input parame-
                   ters for selected commands and a set of options on the com-
                   mand  line. The command defines the CIM Operation that will
                   be executed and the options define the optional.  3. A  set
                   of  options to display help (-h, --help, --ho to get a list
                   of all options, and -hc to get a list of all commands. When
                   these options are requested, no operation is executed.


[1mCOMMANDS[0m
       There  is  a  set of options which are general to all of the CIM Opera-
       tions and most of the compound operations and which provide  parameters
       for  the  initiation  or  execution  of  the command. These include: -n
       Namespace name for this operation (ex. -n root). The default  namespace
       is  root/cimv2.   -l   Location (host name or IP address and optionally
       port) for this operation. The default is localhost:5988 -u   User name.
       The  user  name to be used in in the connect for the command -p   Pass-
       word. The password to be used in the connect for the command

       In addition there is a set of options that modifies the manner in which
       the  command  is  executed  or  the  display of information on response
       including the following:

       --t           Measure time for the operation to be completed and report
       it upon command completion --r [n]        Repeat the operation n times.
       Note that this repeats the operation without disconnecting.  -delay [n]
       Delay  n  seconds between connect and operation.  -s summary    Present
       only summary information,  not  full  output.   Generally  it  presents
       counts of objects returned in place of the names or objects themselves.
       --count       Defines an expected count  of  objects  expected  on  the
       response.   An  error  is  generated  if  this number of objects is not
       received.  --timeout [seconds]  Set the connect timeout  to  some  time
       other than the default timeout.  -o [xml |mof] Output type for commands
       that output objects. Used with commands that  present  CIM  objects  in
       their  response.   -verbose     Displays details on the options for the
       CIM Operation and execution.


       [1mni enumerateinstanceNames[0m
                 Execute the enumerateInstanceNames CIM Operation.  This oper-
                 ation  takes  as  input  options specific to this command the
                 following:

                 It displays the instances names that were returned by the CIM
                 server  in  response  to the enumerateInstances CIM operation
                 with the defined input parameters.



       CLI ni CIM_ManagedElement -p password -n name -n root/PG_Interop


       [1mniall enumerateallinstanceNames[0m
              Execute a enumerateinstancenames  on  all  classes  to  get  all
              instance  names  within  the  defined  namespace.  This function
              searches the complete namespace using the CIM getClass operation
              to  get  the  classes  and the enumerateInstanceNames command to
              enumerate all of the instances for each class.  It  returns  the
              list of instance names found.


       [1mei EnumerateInstances[0m
              Execute  the  CIM  operation  enumerateInstances.   This command
              takes as input options specific to the command -nlo   not  local
              only  operation parameter to false. Note that this negative form
              for the option is used  becaused  the  default  for  local  only
              parameter is true. Thus, not including this parameter means that
              the parameter is not set.  -niq   Set  include qualifiers opera-
              tion  parameter  to  false. Note that this negative form is used
              because the default for this  parameter  is  true.   -ic     Set
              include class origin operation parameter to true -di    Set deep
              inheritance operation parameter to true.   -pl  [property  List]
              optional property list for the operation.

              It returns the instances found either as MOF or XML depending on
              the output options parameter.


       [1mnc EnumerateClassNames[0m
              Enumerate Class Names. [ <classname> ] [options] where the  used
              options are:

                      -niq - do not include qualifiers
                      -nlo - not localOnly
                      -pl - propertyList
                      -cl - class origin


       [1mec EnumerateClasses[0m
              [ <classname> ] [options] where the possible options are:

                      -iq - include qualifiers
                      -niq - do not include qualifiers
                      -lo - localOnly (default so ignored)
                      -nlo - do not include qualifiers
                      -pl - propertyList
                      -cl - class origin


       [1mci createinstance[0m
              NOTE: This command is not implemented in the current version and
              return a fixed "NOT IMPLEMENTED" response.  This command  issues
              the  CIM operation create instance with the parameters provided.
              It requires the [object] parameter defining the class for  which
              the  instance  is  to be created and also allows for an optional
              set of parameters that defined properties to be provided in  the
              following format

                [propertyName]=value

              If  the  propertyName  parameter  is provided with no value, the
              default is inserted.  Note that the CIM operation is issued even
              if the property name is illegal since this is considered to be a
              test program.

              The command actually reads the CIM_Class, inserts the properties
              that  have been defined on the command line using the value type
              from the class.

              The command will be rejected if the class does not exist in  the
              namespace.

              Example:

              cli ci CIM_door name=abc size=zyx

              Returns  the  object path of the created instance if the call to
              the cim server was executed.  Otherwise it returns the exception
              received.

       [1mmi modifyinstance[0m
              NOTE: This command is not implemented in the current version and
              return a fixed "NOT IMPLEMENTED" response.   This  is  the  same
              format  as  the  createinstance.   The  difference  is  that the
              instance must already exist to be modified.


       [1mgi GetInstance[0m
              gets the instance defined by the  instance  name  parameter  and
              displays  it  as in the format chosen for this operation (xml or
              mof).

              This command requiers the [object] parameter.  If the  parameter
              is  an  instance  with  keys  defined  (a  CIMObjectPath), the a
              getInstance CIM operation is executed and the  return  from  the
              CIM  Server  presented  (in  either  xml or mof depending on the
              ouput option).  If the input is a class name, a enumerateinstan-
              ceNames  CIM Operation is executed and if any instance names are
              returned the result is presented to the console for the user  to
              select one of the instances to be deleted.

              If  there are no instances, the return from this command is sim-
              ply an empty response.

              CLI gi [instance name]  [options]  which  returns  the  specific
              instance named.

              OR

              CLI  gi [class name] [options] which presents a list of possible
              instances to the user from which one can  be  selected  for  the
              getinstance.   In  this  case,  the command actually executes an
              enumerateInstanceNames to get the list of instances that is pre-
              sented  to the user.  The getInstance is executed after the user
              makes a selection.

              The possible options specific to this command are:

              -iq  include qualifiers -nlo  localonly -pl   optional  property
              list that defines which properties to return.


       [1mdi deleteinstance[0m
              Delete  instance executed a single deleteInstance command to the
              CIM Server.

              This command requires the [object] parameter.  If this parameter
              is  a  full  instance  name with className and key bindings, the
              deleteInstance CIM Operation is executed directly.  If it  is  a
              class  name with no keybindings, the  enumerateInstances command
              is executed and the list of returned instances presented to  the
              console for the user to select one to delete.  CLI then executes
              deleteInstance with the selected instance name and  returns  the
              response,

              return - there is an empty response if the instance was success-
              fully deleted or an exception return if there were any errors.

              CLI di [object]

              Examples:

              CLI di PG_test - esecutes enumerateInstanceName on  PG_test  and
              allows the user to select the instance to be deleted.

              CLI di PG_test.name="abc" - attempts to delete that object.


       [1mgq getQualifier[0m
              getQualifier displays the target qualifier

              CLI gq [qualifier name]


       [1msq setQualifier[0m
              This command is not implemented.


       [1meq enumeratequalifiers[0m
              Enumerate all of the qualifiers defined in the target namespace

              CLI eq

              There are no options for this command.


       [1mdq deletequalifier[0m
              Deletes the target qualifier.

              CLI dq [qualifier name]


       [1ma associatiors[0m
              Enumerate the associators for the target object.  The syntax for
              this operation is
                  CLI a [object] [options] where the possible options are:


              Text


       [1man associatornames[0m
              Enumerate teh associator names for the target object.  The  syn-
              tax for this operation is:

                  CLI an [object name] [options]

              where ObjectName can be either a class name or an instance name

              options can be as follows:

              TBD


       [1mr references[0m
              Text


       [1mrn referencenames[0m
              Text


       [1mim invokeMethod[0m
              This command executes an extrinsic operation to execute a method
              on a CIM class or instance

              The form of the command is

              CLI [object] [methodname] *[parameters]

              Note that there is one additional  required  parameter  to  this
              command than to most commands, the [methodname]

              Example:

              CLI PG_WBEMSLPTemplate register - n root/PG_Interop

              The  parameters are supplied as name=value pairs. In the current
              version, all parameters are treated as strings.


       eq    executeQuery
              Not Supported


       ns    enumeratenamespaces
              Request an Enumeration of all the namespaces in the  target  CIM
              Server.   This  command uses both the CIM_Namespace class and if
              that fails, the __Namespace  class  to  determine  the  list  of
              namespaces.

              RETURN  -  It  returns a list of the namespace names returned by
              the CIM Server.

       ?     Show Command Opetions



[1mOPTIONS[0m
       There are a significant number of options  to  this  utility,  some  if
       which provide specific information for one or more commands and some of
       which are universal across all of the commands.   In general, the  pro-
       gram does not check for spurious options so that if you input an option
       that is not used by a particular operation, it is ignored.

       -u   User. Allows input of a user name for authentication

       -p   password. Allows input of a password for server authentication  of
            the command

       -l   location.  Allows input of the host name for the CIM server.  This
            includes the host name and optionally the  port.  The  default  is
            localhost:5988.   If  the port component is not input port 5988 is
            assumed.

       -n   Namespace. Defines the namespace for the operation.

       -di  deepInheritance.  Specifies  the  deepInheritance  parameter   for
            selected commands if the option is set.  Note that this means dif-
            ferent things to different commands and is used only with the enu-
            merate commands.

       -lo  localOnly.   Specifies   the  localOnly  operation  parameter  for
            selected commands if the option is set.  See the commands for more
            information.

       -iq  includeQualifiers. Specifies the includeQualifiers operation input
            paramter for selected commands. if the option is set.


       -is  includeClassOrigin Set the includeClassOrigin operation  parameter
            to true. Default(false).


       -u   User Defines User Name for authentication. Default().


       -p   Password Defines password for authentication. Default().


       -l   location  Specifies  system  and  port  (HostName:port).  Port  is
            optional. Default(localhost:5988).


       -n   namespace.    Specifies   namespace   to   use   for    operation.
            Default(root/cimv2).


       -di  deepInheritance.   If  set deepInheritance operation parameter set
            true . Default(false).


       -lo  localOnly.  DEPRECATED. This was used to set  LocalOnly.  However,
            default  should be true and we cannot use True as default. See !lo
            . Default(true).


       -!lo !localOnly.  When set, sets LocalOnly = false on operations.  DEP-
            RECATED,!confuses bash. Use -nlo . Default(false).


       -nlo notLocalOnly.   When  set,  sets LocalOnly = false on operations .
            Default(false).


       -iq  includeQualifiers.  Deprecated.  Sets  includeQualifiers  =  True.
            However, default = true . Default(true).


       -!iq !includeQualifiers.  Sets includeQualifiers = false on operations.
            DEPRECATED, ! confuses bash. Use -niq. Default(false).


       -niq notIncludeQualifiers Sets includeQualifiers = false on operations.
            Default(false).


       -pl  propertyList Defines a propertyNameList. Format is p1,p2,p3 (with-
            out spaces). . Default(###!###)


       -ac  assocClass Defines  a  assocClass  string  for  Associator  calls.
            Default()


       -ar  assocRole Defines a role string for Associatiors AssocRole parame-
            ter. Default()


       -r   role Defines a role string for reference role parameter. Default()


       -rc  resultClass  Defines a resultClass string for References and Asso-
            ciatiors. Default()


       -rr  resultRole Defines a role string for associators operation result-
            Role parameter. . Default()


       -ip  inputParameters Defines an invokeMethod input parameter list. For-
            mat is p1=v1,p2=v2,..,pn=vn (without spaces) . Default()


       -f   filter Defines a filter to use  for  query.  One  String  input  .
            Default()


       --s  substitute Defines a conditional substition of input parameters. )
            . Default()


       -o   outputformats Output in xml, mof, txt. Default(mof)


       -x   xmlOutput  Output  objects  in  xml   instead   of   mof   format.
            Default(false)


       --v  version Displays software Version . Default(false)


       -v   verbose  Verbose  Display. Includes Detailed Param Input display .
            Default(false)


       -s   summary Displays only summary count for enumerations, associators,
            etc. .Default(false)


       -h   help Prints help usage message . Default(false)


       --help
            helpfull Prints full help message with commands, options, examples
            . Default(false)


       -ho  helpoptions Prints list of options . Default(false)


       -hc  helpcommands Prints CIM Operation command list . Default(false)


       --timeout
            connecttimeout Set the connection timeout in seconds. . Default(0)


       -d   debug More detailed debug messages . Default(false)


       -trace
            trace Set Pegasus Common Components Trace. Sets the Trace level. 0
            isoff. Default(0)


       -delay
            delay Delay between connection and request . Default(0)


       -count
            count Expected count of objects returned if the summary set. Tests
            this  count  and display difference. Term nonzero if test fails  .
            Default(29346)


       --rr repeat Number of times to repeat the function. Zero means one time
            . Default(0)


       --t  time  Measure  time  for  the  operation  and  present  results. .
            Default(false)


[1mEXAMPLES[0m
       Execute an enumerateinstancenames CIM operation for the pg_computersys-
       tem Class
       CLI  enumerateinstancenames pg_computersystem  -- enumerateinstances of
       class
          or
        CLI ei pg_computersystem    -- Same as above


       Enumerate the class names from the default namespace "root/cimv2"
        CLI enumerateclassnames -- Enumerate classnames from root/cimv2.

       Enumerate class names from the namespace "root"
        CLI ec /n root -- Enumerate classnames from namespace root.

        CLI ec -o xml   -- Enumerate classes with XML output starting at  root
       CLI enumerateclasses CIM_Computersystem -o xml
           -- Enumerate classes in MOF starting with CIM_Computersystem

        CLI getclass CIM_door -a -u guest -p guest
           --  Get  class with authentication set and user = guest, password =
       guest.

        CLI rn TST_Person.name=@MIKE@ -n root/sampleprovider -rc  TST_Lineage.

        CLI ec -o XML -- enumerate classes and output XML rather than MOF.

        CLI getqualifiers -- Get the qualifiers in mof output format

[1mBUGS[0m
       Currently  at  least  some  platforms and shells have problems with the
       double-quote which is used extensively in object names within  CIM.  To
       get  around this, the character '@' has been mapped to the double-quote
       so that inputting a command line with this character in place of quotes
       is acceptable.  Thus, for example,

       CLI rn TST_Person.name=@MIKE@ ...

       is equivalent to

       CLI rn TST_Person.name-"MIKE" ...

       In  this  version  there  is  no way to turn this character mapping off
       which means that the @ character is lost.


[1mWARNINGS[0m
[1mRETURN VALUE[0m
       CLI returns the following codes TBD

[1mAUTHOR[0m
       Karl Schopmeyer k.schopmeyer@opengroup.org



                                     LOCAL                              CLI(1)
