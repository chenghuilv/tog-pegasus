CLI(1)                                                                  CLI(1)



NNAAMMEE
       CLI - command line WBEM Client

SSYYNNOOPPSSIISS
       CCLLII [[ccoommmmaanndd]] [[oobbjjeecctt]] [[ooppttiioonn]] _o_p_t_i_o_n _o_p_t_i_o_n [["" _f_1 _f_2 ......""]]

AAVVAAIILLAABBIILLIITTYY
       All platforms that support the Pegasus CIMOM


DDEESSCCRRIIPPTTIIOONN
       _C_L_I is a command line test tool for executing CIM client operations. It
       implements all of the DMTF CIM operations except  for  the  modify  and
       create  class/instance operations and includes several other operations
       that are useful in testing including getting all namespaces and enumer-
       ating all instances in a namespace.

       Each  execution  of  CLI invokes a CIM Operation with the corresponding
       command parameters equivalent to the CIM Operations defined in the  CIM
       Operations over HTTP specification.

       In  addition  to the basic CIM Operations defined in the specification,
       this tool implements a number of other specific operations that support
       testing  and  querying  CIM  servers  including  a command to query for
       namespaces and to get all instances in a namespace.

        enumerate namespaces (ns) - Returns a list of the namespaces available
       from the CIMOM.
        enumerate  all instance names (niall) - Returns a list of all instance
       names in the defined namespace.

       The format of this command is generally:

       CLI [Operation] [object] [option] [extra parameters]


       [Operation] defines the  operation to be executed. CLI executes all  of
       the DMTF Cim Operatioons (ex. getclass)
                   and a  set  of  compound  operation  (enumeratenamespaces).
                   There  are two forms for each Operation, a short form typi-
                   cally two characters (i.e. gc) and the long form  which  is
                   the full name of the operation (i.e. getclass).

       [object]  The name of the object input with the command. This parameter
       is operation dependent.
                   For  example,  with  the getClass operation the object is a
                   class name.  With the getinstance command the object is  an
                   objectname.  Note  that some of the commands do not require
                   an object.   Thus, for example  the  [object]  is  optional
                   with  the  enumerateClasses  operation  as  it  is with the
                   equivalent  enumerateClassNames CIM operation.

       [option...] Options are identified on the command line with the - or --
                   notation.  There are three types of options:

                   1. A set of options that are universal and modify or define
                   the execution of the command or the  form  of  the  return.
                   This  includes  options  like setting the output format for
                   object responses or requesting only summary operation.   2.
                   A  set of options that represent the optional input parame-
                   ters for selected commands and a set of options on the com-
                   mand  line. The command defines the CIM Operation that will
                   be executed and the options define the optional.  3. A  set
                   of  options to display help (-h, --help, --ho to get a list
                   of all options, and -hc to get a list of all commands. When
                   these options are requested, no operation is executed.


CCOOMMMMAANNDDSS
       There  is  a  set of options which are general to all of the CIM Opera-
       tions and most of the compound operations and which provide  parameters
       for  the  initiation  or  execution  of  the command. These include: -n
       Namespace name for this operation (ex. -n root). The default  namespace
       is  root/cimv2.   -l   Location (host name or IP address and optionally
       port) for this operation. The default for this command if  the  the  -n
       option  is  not  used  is to use the Pegasus connectLocal() function to
       connect to the server.  Note that this means that a command like CLI gc
       CIM_Door  may  not  work  when trying to connect to a server other than
       Pegasus on the same system. If CLI is to be used to connect  to  a  CIM
       Server  other  than  Pegasus  on the same system use -l localhost or -l
       127.0.0.1 or the actual name or IP address.  This  will  force  CLI  to
       make  the  connection  in  the  normal way, not using connectLocal() -u
       User name. The user name to be used in in the connect for  the  command
       -p   Password. The password to be used in the connect for the command

       In addition there is a set of options that modifies the manner in which
       the command is executed or  the  display  of  information  on  response
       including the following:

       --t           Measure time for the operation to be completed and report
       it upon command completion --r [n]        Repeat the operation n times.
       Note that this repeats the operation without disconnecting.  -delay [n]
       Delay n seconds between connect and operation.  -s  summary     Present
       only  summary  information,  not  full  output.   Generally it presents
       counts of objects returned in place of the names or objects themselves.
       --count        Defines  an  expected  count  of objects expected on the
       response.  An error is generated if  this  number  of  objects  is  not
       received.   --timeout  [seconds]   Set the connect timeout to some time
       other than the default timeout.  -o [xml |mof] Output type for commands
       that  output  objects.  Used  with commands that present CIM objects in
       their response.  -verbose     Displays details on the options  for  the
       CIM Operation and execution.


       nnii eennuummeerraatteeiinnssttaanncceeNNaammeess
                 Execute the enumerateInstanceNames CIM Operation.  This oper-
                 ation takes as input options specific  to  this  command  the
                 following:

                 It displays the instances names that were returned by the CIM
                 server in response to the  enumerateInstances  CIM  operation
                 with the defined input parameters.



       CLI ni CIM_ManagedElement -p password -n name -n root/PG_Interop


       nniiaallll eennuummeerraatteeaalllliinnssttaanncceeNNaammeess
              Execute  a  enumerateinstancenames  on  all  classes  to get all
              instance names within  the  defined  namespace.   This  function
              searches the complete namespace using the CIM getClass operation
              to get the classes and  the  enumerateInstanceNames  command  to
              enumerate  all  of  the instances for each class. It returns the
              list of instance names found.


       eeii EEnnuummeerraatteeIInnssttaanncceess
              Execute the  CIM  operation  enumerateInstances.   This  command
              takes  as input options specific to the command -nlo   not local
              only operation parameter to false. Note that this negative  form
              for  the  option  is  used  becaused  the default for local only
              parameter is true. Thus, not including this parameter means that
              the parameter is not set.  -niq   Set  include qualifiers opera-
              tion parameter to false. Note that this negative  form  is  used
              because  the  default  for  this  parameter is true.  -ic    Set
              include class origin operation parameter to true -di    Set deep
              inheritance  operation  parameter  to true.  -pl [property List]
              optional property list for the operation.

              It returns the instances found either as MOF or XML depending on
              the output options parameter.


       nncc EEnnuummeerraatteeCCllaassssNNaammeess
              Enumerate  Class Names. [ <classname> ] [options] where the used
              options are:

                      -niq - do not include qualifiers
                      -nlo - not localOnly
                      -pl - propertyList
                      -cl - class origin


       eecc EEnnuummeerraatteeCCllaasssseess
              [ <classname> ] [options] where the possible options are:

                      -iq - include qualifiers
                      -niq - do not include qualifiers
                      -lo - localOnly (default so ignored)
                      -nlo - do not include qualifiers
                      -pl - propertyList
                      -cl - class origin


       ccii ccrreeaatteeiinnssttaannccee
              NOTE: This command is not implemented in the current version and
              return  a fixed "NOT IMPLEMENTED" response.  This command issues
              the CIM operation create instance with the parameters  provided.
              It  requires the [object] parameter defining the class for which
              the instance is to be created and also allows  for  an  optional
              set  of parameters that defined properties to be provided in the
              following format

                [propertyName]=value

              If the propertyName parameter is provided  with  no  value,  the
              default is inserted.  Note that the CIM operation is issued even
              if the property name is illegal since this is considered to be a
              test program.

              The command actually reads the CIM_Class, inserts the properties
              that have been defined on the command line using the value  type
              from the class.

              The  command will be rejected if the class does not exist in the
              namespace.

              Example:

              cli ci CIM_door name=abc size=zyx

              Returns the object path of the created instance if the  call  to
              the cim server was executed.  Otherwise it returns the exception
              received.

       mmii mmooddiiffyyiinnssttaannccee
              NOTE: This command is not implemented in the current version and
              return  a  fixed  "NOT  IMPLEMENTED" response.  This is the same
              format as  the  createinstance.   The  difference  is  that  the
              instance must already exist to be modified.


       ggii GGeettIInnssttaannccee
              gets  the  instance  defined  by the instance name parameter and
              displays it as in the format chosen for this operation  (xml  or
              mof).

              This  command requiers the [object] parameter.  If the parameter
              is an instance  with  keys  defined  (a  CIMObjectPath),  the  a
              getInstance  CIM  operation  is executed and the return from the
              CIM Server presented (in either xml  or  mof  depending  on  the
              ouput option).  If the input is a class name, a enumerateinstan-
              ceNames CIM Operation is executed and if any instance names  are
              returned  the result is presented to the console for the user to
              select one of the instances to be deleted.

              If there are no instances, the return from this command is  sim-
              ply an empty response.

              CLI  gi  [instance  name]  [options]  which returns the specific
              instance named.

              OR

              CLI gi [class name] [options] which presents a list of  possible
              instances  to  the  user  from which one can be selected for the
              getinstance.  In this case, the  command  actually  executes  an
              enumerateInstanceNames to get the list of instances that is pre-
              sented to the user.  The getInstance is executed after the  user
              makes a selection.

              The possible options specific to this command are:

              -iq   include  qualifiers -nlo  localonly -pl  optional property
              list that defines which properties to return.

              Example:

              CLI gi cim_managedElement

              This is an interactive request that returns a list of  instances
              from  an  enumerateinstance of CIM_ManagedElement from which the
              user can  select  one  which  CLI  will  return  as  a  complete
              instance.



       ddii ddeelleetteeiinnssttaannccee
              Delete  instance executed a single deleteInstance command to the
              CIM Server.

              This command requires the [object] parameter.  If this parameter
              is  a  full  instance  name with className and key bindings, the
              deleteInstance CIM Operation is executed directly.  If it  is  a
              class  name with no keybindings, the  enumerateInstances command
              is executed and the list of returned instances presented to  the
              console for the user to select one to delete.  CLI then executes
              deleteInstance with the selected instance name and  returns  the
              response,

              return - there is an empty response if the instance was success-
              fully deleted or an exception return if there were any errors.

              CLI di [object]

              Examples:

              CLI di PG_test - esecutes enumerateInstanceName on  PG_test  and
              allows the user to select the instance to be deleted.

              CLI di PG_test.name="abc" - attempts to delete that object.


       ggqq ggeettQQuuaalliiffiieerr
              getQualifier displays the target qualifier

              CLI gq [qualifier name]

              Example:

              CLI gq abstract - returns the mof or xml for the abstract quali-
              fier.

       ssqq sseettQQuuaalliiffiieerr
              This command is not implemented.


       eeqq eennuummeerraatteeqquuaalliiffiieerrss
              Enumerate all of the qualifiers defined in the target namespace

              CLI eq

              There are no options for this command.


       ddqq ddeelleetteeqquuaalliiffiieerr
              Deletes the target qualifier.

              CLI dq [qualifier name]

              NOTE: This should be used with great caution.


       aa aassssoocciiaattoorrss
              Enumerate the associators for the target object.  The syntax for
              this operation is
                  CLI a [object] [options] where the possible options are:

              TBD

              Text


       aann aassssoocciiaattoorrnnaammeess
              Enumerate  teh associator names for the target object.  The syn-
              tax for this operation is:

                  CLI an [object name] [options]

              where ObjectName can be either a class name or an instance name

              options can be as follows:

              TBD


       rr rreeffeerreenncceess
              Text


       rrnn rreeffeerreenncceennaammeess
              Text


       iimm iinnvvookkeeMMeetthhoodd
              This command executes an extrinsic operation to execute a method
              on a CIM class or instance

              The form of the command is

              CLI [object] [methodname] *[parameters]

              Note  that  there  is  one additional required parameter to this
              command than to most commands, the [methodname]

              Example:

              CLI PG_WBEMSLPTemplate register - n root/PG_Interop

              The parameters are supplied as name=value pairs. In the  current
              version, all parameters are treated as strings.


       eq    executeQuery
              Not Supported


       ns    enumeratenamespaces
              Request  an  Enumeration of all the namespaces in the target CIM
              Server.  This command uses both the CIM_Namespace class  and  if
              that  fails,  the  __Namespace  class  to  determine the list of
              namespaces.

              RETURN - It returns a list of the namespace  names  returned  by
              the CIM Server.

       ?     Show Command Opetions



OOPPTTIIOONNSS
       There  are  a  significant  number  of options to this utility, some if
       which provide specific information for one or more commands and some of
       which  are universal across all of the commands.   In general, the pro-
       gram does not check for spurious options so that if you input an option
       that is not used by a particular operation, it is simply ignored.

       -u   User. Allows input of a user name for authentication

       -p   password.  Allows input of a password for server authentication of
            the command

       -l   location. Allows input of the host name for the CIM server.   This
            includes  the  host  name  and optionally the port. The default is
            localhost:5988.  If the port component is not input port  5988  is
            assumed.

       -n   Namespace. Defines the namespace for the operation.

       -di  deepInheritance.   Specifies  the  deepInheritance  parameter  for
            selected commands if the option is set.  Note that this means dif-
            ferent things to different commands and is used only with the enu-
            merate commands.

       -lo  localOnly.  Specifies  the  localOnly  operation   parameter   for
            selected commands if the option is set.  See the commands for more
            information. This option is Deprecated in favor of  the  -!lo  and
            -nlo  because  the  default for local only is on so that generally
            the -lo is simply the default.  We recommend using  -nlo  to  turn
            off local only.

       -iq  includeQualifiers. Specifies the includeQualifiers operation input
            paramter for selected commands. This option is deprecated in favor
            of  the  -!iq and -niq parameters because -iq is the equivalent of
            the defualt for most of the commands.


       -ic  includeClassOrigin Set the includeClassOrigin operation  parameter
            to true. Default(false).


       -u   User Defines User Name for authentication. Default is no user name
            and no authentication.

            Example: -u username


       -p   Password Defines password for authentication. Default is no  pass-
            word and no connection authentication.


       -l   location  Specifies  system  and  port  (HostName:port).  Port  is
            optional. Default(localhost:5988).


       -n   namespace.    Specifies   namespace   to   use   for    operation.
            Default(root/cimv2).


       -di  deepInheritance.   If  set deepInheritance operation parameter set
            true . Default(false).


       -lo  localOnly.  DEPRECATED. This was used to set  LocalOnly.  However,
            default should be true and we cannot use True as default.  See !lo
            . Default(true).


       -!lo !localOnly.  When set, sets LocalOnly = false on operations.  DEP-
            RECATED,!confuses bash. Use -nlo . Default(false).  See also -nlo.


       -nlo notLocalOnly.  When set, sets LocalOnly = false  on  operations  .
            Default(false).  See also -!lo. This form was implemented with the
            -!lo form on some systems. It is equivalent to -!lo.


       -iq  includeQualifiers.  Deprecated.  Sets  includeQualifiers  =  True.
            However, default = true . Default(true).


       -!iq !includeQualifiers.  Sets includeQualifiers = false on operations.
            DEPRECATED, ! confuses bash. Use -niq. Default(false).


       -niq notIncludeQualifiers Sets includeQualifiers = false on operations.
            Default(false).  See also -!iq.  This form was implemented because
            of problems with the -!iq form on some systems.  It is  equivalent
            to -!iq.


       -pl  propertyList Defines a propertyNameList. Format is p1,p2,p3 (with-
            out spaces). . Default(###!###)


       -ac  assocClass Defines  a  assocClass  string  for  Associator  calls.
            Default()


       -ar  assocRole Defines a role string for Associatiors AssocRole parame-
            ter. Default()


       -r   role Defines a role string for reference role parameter. Default()


       -rc  resultClass  Defines a resultClass string for References and Asso-
            ciatiors. Default()


       -rr  resultRole Defines a role string for associators operation result-
            Role parameter. . Default()


       -ip  inputParameters Defines an invokeMethod input parameter list. For-
            mat is p1=v1,p2=v2,..,pn=vn (without spaces) . Default()


       -f   filter Defines a filter to use  for  query.  One  String  input  .
            Default()


       --s  substitute Defines a conditional substition of input parameters. )
            . Default()


       -o   outputformats Output in xml, mof, txt. Default(mof)


       -x   xmlOutput  Output  objects  in  xml   instead   of   mof   format.
            Default(false)


       --v  version Displays software Version . Default(false)


       -v   verbose  Verbose  Display. Includes Detailed Param Input display .
            Default(false)


       -s   summary Displays only summary count for enumerations, associators,
            etc. .Default(false)


       -h   help Prints help usage message . Default(false)


       --help
            helpfull Prints full help message with commands, options, examples
            . Default(false)


       -ho  helpoptions Prints list of options . Default(false)


       -hc  helpcommands Prints CIM Operation command list . Default(false)


       --timeout
            connecttimeout Set the connection timeout in seconds. . Default(0)


       -d   debug More detailed debug messages . Default(false)


       -trace
            trace Set Pegasus Common Components Trace. Sets the Trace level. 0
            isoff. Default(0)


       -delay
            delay Delay between connection and request . Default(0)


       -count
            count Expected count of objects returned if the summary set. Tests
            this  count  and display difference. Term nonzero if test fails  .
            Default(29346)


       --rr repeat Number of times to repeat the function. Zero means one time
            . Default(0)


       --t  time  Measure  time  for  the  operation  and  present  results. .
            Default(false)


EEXXAAMMPPLLEESS
       Execute an enumerateinstancenames CIM operation for the pg_computersys-
       tem Class
       CLI  enumerateinstancenames pg_computersystem  -- enumerateinstances of
       class
          or
        CLI ei pg_computersystem    -- Same as above


       Enumerate the class names from the default namespace "root/cimv2"
        CLI enumerateclassnames -- Enumerate classnames from root/cimv2.

       Enumerate class names from the namespace "root"
        CLI ec /n root -- Enumerate classnames from namespace root.

        CLI ec -o xml   -- Enumerate classes with XML output starting at  root
       CLI enumerateclasses CIM_Computersystem -o xml
           -- Enumerate classes in MOF starting with CIM_Computersystem

        CLI getclass CIM_door -a -u guest -p guest
           --  Get  class with authentication set and user = guest, password =
       guest.

        CLI rn TST_Person.name=@MIKE@ -n root/sampleprovider -rc  TST_Lineage.

        CLI ec -o XML -- enumerate classes and output XML rather than MOF.

        CLI getqualifiers -- Get the qualifiers in mof output format

BBUUGGSS
       Currently  at  least  some  platforms and shells have problems with the
       double-quote which is used extensively in object names within  CIM.  To
       get  around this, the character ’@’ has been mapped to the double-quote
       so that inputting a command line with this character in place of quotes
       is acceptable.  Thus, for example,

       CLI rn TST_Person.name=@MIKE@ ...

       is equivalent to

       CLI rn TST_Person.name-"MIKE" ...

       In  this  version  there  is  no way to turn this character mapping off
       which means that the @ character is lost.


WWAARRNNIINNGGSS
RREETTUURRNN VVAALLUUEE
       CLI returns the following codes TBD

AAUUTTHHOORR
       Karl Schopmeyer k.schopmeyer@opengroup.org



                                     LOCAL                              CLI(1)
