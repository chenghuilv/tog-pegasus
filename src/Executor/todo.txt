    ============================================================================
    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
    ============================================================================

    (A) Setsid()?

    (A) Killing cimserver should also kill cimservermain.

    (A) Move PAM into executor process.

    (A) Convert uid to user name for messages.

    (A) Test all authentication modes.

    (A) Test all OOP execution modes.

    (A) During local-authenticaiton, the server program creates a temporary
        challenge file called /tmp/cimclient_<username>_<num>. Be sure to
        add a policy check for this file.

    (A) Implement policy checks.

    (A) Logging via syslog (implement log-level option).

    (A) How do we handle the syslog program names (cimservermain and 
        cimserver, or cimexecutor and cimserver)?

    ============================================================================
    BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
    ============================================================================

    (B) Prepend underscore to static function.

    (B) Converter executor back to C program.

    (B) Possibly add option to specify which user cimservermain is run as
        (this is to override the default behavior, which is to run it as the
        cimservermain program owner).

    (B) Examine usage of functions that may create, delete, or rename files.

            FileSystem::...
            ofstream()
            fopen()
            open()

    (B) Should the executor kill cimserver when it exits on fatal errors?

    (B) Remove backtrace calls from Exeception.cpp.

    (B) Revisit ownership of Unix domain socket file.

