//%2006////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2000, 2001, 2002 BMC Software; Hewlett-Packard Development
// Company, L.P.; IBM Corp.; The Open Group; Tivoli Systems.
// Copyright (c) 2003 BMC Software; Hewlett-Packard Development Company, L.P.;
// IBM Corp.; EMC Corporation, The Open Group.
// Copyright (c) 2004 BMC Software; Hewlett-Packard Development Company, L.P.;
// IBM Corp.; EMC Corporation; VERITAS Software Corporation; The Open Group.
// Copyright (c) 2005 Hewlett-Packard Development Company, L.P.; IBM Corp.;
// EMC Corporation; VERITAS Software Corporation; The Open Group.
// Copyright (c) 2006 Hewlett-Packard Development Company, L.P.; IBM Corp.;
// EMC Corporation; Symantec Corporation; The Open Group.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// THE ABOVE COPYRIGHT NOTICE AND THIS PERMISSION NOTICE SHALL BE INCLUDED IN
// ALL COPIES OR SUBSTANTIAL PORTIONS OF THE SOFTWARE. THE SOFTWARE IS PROVIDED
// "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//==============================================================================
// ===================================================================
// Indication provider
// ===================================================================

instance of PG_ProviderModule
{
   Description = "CMPI Test Indication provider";
   Name = "TestCMPIIndicationProviderModule";
  // The library name on disk
   Location = "cmpiTestIndicationProvider"; 
   Vendor = "OpenPegasus";
   Version = "2.0.0";
   InterfaceType = "CMPI";
   InterfaceVersion = "2.0.0";
};

instance of PG_Provider
{
   ProviderModuleName = "TestCMPIIndicationProviderModule";
   // The provider name as referenced in the code!
   Name = "TestCMPIIndicationProvider";	
};

instance of PG_ProviderCapabilities
{
   ProviderModuleName = "TestCMPIIndicationProviderModule";
   ProviderName = "TestCMPIIndicationProvider";
   CapabilityID = "CMPI Test Indication Provider";
   // Name of the CIM Class as defined in the mof.
   ClassName = "TestCMPI_Indication";
   Namespaces = { "test/TestProvider" };
   ProviderType = { 4 }; // Indication
   SupportedProperties = NULL; // All properties
   SupportedMethods = NULL; // All methods
};


// ===================================================================
// Method provider
// ===================================================================
instance of PG_ProviderModule
{
   Description = "CMPI Test Method provider";
   Name = "TestCMPIMethodProviderModule";
  // The library name on disk
   Location = "cmpiTestMethodProvider"; 
   Vendor = "OpenPegasus";
   Version = "2.0.0";
   InterfaceType = "CMPI";
   InterfaceVersion = "2.0.0";
};

instance of PG_Provider
{
   ProviderModuleName = "TestCMPIMethodProviderModule";
   // The provider name as referenced in the code!
   Name = "TestCMPIMethodProvider";	
};

instance of PG_ProviderCapabilities
{
   ProviderModuleName = "TestCMPIMethodProviderModule";
   ProviderName = "TestCMPIMethodProvider";
   CapabilityID = "CMPI Test Method Provider";
   // Name of the CIM Class as defined in the mof.
   ClassName = "TestCMPI_Method";
   Namespaces = { "test/TestProvider" };
   ProviderType = { 5 }; // Method
   SupportedProperties = NULL; // All properties
   SupportedMethods = NULL; // All methods
};

// ===================================================================
// Instance provider that fails loading. The provider returns a NULL pointer
// when _CreateInstance function is called. (the entry point)
// ===================================================================
instance of PG_ProviderModule
{
   Description = "CMPI Test Fail_1 provider";
   Name = "TestCMPIFail_1ProviderModule";
  // The library name on disk
   Location = "cmpiTestFail_1Provider"; 
   Vendor = "OpenPegasus";
   Version = "2.0.0";
   InterfaceType = "CMPI";
   InterfaceVersion = "2.0.0";
};

instance of PG_Provider
{
   ProviderModuleName = "TestCMPIFail_1ProviderModule";
   // The provider name as referenced in the code!
   Name = "TestCMPIFail_1Provider";	
};

instance of PG_ProviderCapabilities
{
   ProviderModuleName = "TestCMPIFail_1ProviderModule";
   ProviderName = "TestCMPIFail_1Provider";
   CapabilityID = "CMPI Test Instance Fail 1 Provider";
   // Name of the CIM Class as defined in the mof.
   ClassName = "TestCMPI_Fail_1";
   Namespaces = { "test/TestProvider" };
   ProviderType = { 2,3,4, 5}; //All the different types
   SupportedProperties = NULL; // All properties
   SupportedMethods = NULL; // All methods
};

// ===================================================================
// Instance provider that fails loading. The provider has the symbolic 
// name for the _CreateInstance function mistyped. 
// ===================================================================
instance of PG_ProviderModule
{
   Description = "CMPI Test Fail_2 provider";
   Name = "TestCMPIFail_2ProviderModule";
  // The library name on disk
   Location = "cmpiTestFail_2Provider"; 
   Vendor = "OpenPegasus";
   Version = "2.0.0";
   InterfaceType = "CMPI";
   InterfaceVersion = "2.0.0";
};

instance of PG_Provider
{
   ProviderModuleName = "TestCMPIFail_2ProviderModule";
   // The provider name as referenced in the code!
   Name = "TestCMPIFail_2Provider";	
};

instance of PG_ProviderCapabilities
{
   ProviderModuleName = "TestCMPIFail_2ProviderModule";
   ProviderName = "TestCMPIFail_2Provider";
   CapabilityID = "CMPI Test Instance Fail 1 Provider";
   // Name of the CIM Class as defined in the mof.

   ClassName = "TestCMPI_Fail_2";
   Namespaces = { "test/TestProvider" };
   ProviderType = { 2 }; //Instance 
   SupportedProperties = NULL; // All properties
   SupportedMethods = NULL; // All methods
};
// ===================================================================
// Instance provider that fails loading. The provider has two entry
// functions - the _CreateInstance and _Generic_Create_Instance. They
// cannot co-exist.
// ===================================================================
instance of PG_ProviderModule
{
   Description = "CMPI Test Fail_3 provider";
   Name = "TestCMPIFail_3ProviderModule";
  // The library name on disk
   Location = "cmpiTestFail_3Provider"; 
   Vendor = "OpenPegasus";
   Version = "2.0.0";
   InterfaceType = "CMPI";
   InterfaceVersion = "2.0.0";
};

instance of PG_Provider
{
   ProviderModuleName = "TestCMPIFail_3ProviderModule";
   // The provider name as referenced in the code!
   Name = "TestCMPIFail_3Provider";	
};

instance of PG_ProviderCapabilities
{
   ProviderModuleName = "TestCMPIFail_3ProviderModule";
   ProviderName = "TestCMPIFail_3Provider";
   CapabilityID = "CMPI Test Instance Fail 1 Provider";
   // Name of the CIM Class as defined in the mof.

   ClassName = "TestCMPI_Fail_3";
   Namespaces = { "test/TestProvider" };
   ProviderType = { 2 }; //Instance 
   SupportedProperties = NULL; // All properties
   SupportedMethods = NULL; // All methods
};
// ===================================================================
// Instance provider that returns an error for every Instance API
// class.
// ===================================================================
instance of PG_ProviderModule
{
   Description = "CMPI Test Fail_4 provider";
   Name = "TestCMPIFail_4ProviderModule";
  // The library name on disk
   Location = "cmpiTestFail_4Provider"; 
   Vendor = "OpenPegasus";
   Version = "2.0.0";
   InterfaceType = "CMPI";
   InterfaceVersion = "2.0.0";
};

instance of PG_Provider
{
   ProviderModuleName = "TestCMPIFail_4ProviderModule";
   // The provider name as referenced in the code!
   Name = "TestCMPIFail_4Provider";	
};

instance of PG_ProviderCapabilities
{
   ProviderModuleName = "TestCMPIFail_4ProviderModule";
   ProviderName = "TestCMPIFail_4Provider";
   CapabilityID = "CMPI Test Instance Fail 1 Provider";
   // Name of the CIM Class as defined in the mof.

   ClassName = "TestCMPI_Fail_4";
   Namespaces = { "test/TestProvider" };
   ProviderType = { 2 }; //Instance 
   SupportedProperties = NULL; // All properties
   SupportedMethods = NULL; // All methods
};
// ===================================================================
// Instance provider that tests thread allocation using
// broker->xft->newThread functionality.
// ===================================================================

instance of PG_ProviderModule
{
   Description = "CMPI Test newThread provider";
   Name = "TestCMPIThreadProviderModule";
  // The library name on disk
   Location = "cmpiTestCMPIThreadProvider";
   Vendor = "OpenPegasus";
   Version = "2.0.0";
   InterfaceType = "CMPI";
   InterfaceVersion = "2.0.0";
};

instance of PG_Provider
{
   ProviderModuleName = "TestCMPIThreadProviderModule";
   // The provider name as referenced in the code!
   Name = "TestCMPIThreadProvider";	
};

instance of PG_ProviderCapabilities
{
   ProviderModuleName = "TestCMPIThreadProviderModule";
   ProviderName = "TestCMPIThreadProvider";
   CapabilityID = "CMPI Test newThread Provider";
   // Name of the CIM Class as defined in the mof.
   ClassName = "TestCMPI_Thread";
   Namespaces = { "test/TestProvider" };
   ProviderType = { 2 }; // Instance
   SupportedProperties = NULL; // All properties
   SupportedMethods = NULL; // All methods
};
