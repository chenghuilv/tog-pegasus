    (*) XScale target-board testing.

    (*) CIMPLE porting to xScale and the new provider model.

    (*) SSL porting.
    
        - Integrate vxWorks SSL in vXworks image.

        - SSL linkage and testing.

        - Certificate management. 

    (*) Password-file authentication.

    (*) Memory limits.
	
	- Setting server max memory usage in configuration

        - Throttling.

		- operations

    		- Indications

        - Reduce memory usage of enumerate-classes.

        - Modify enumerateClass operations to reduce memory usage.

    (*) VxWorks 5.5 porting.

    (*) Formalize embedded-server SDK.

    (*) Eliminate configuration files dependencies.

    (*) Indications.

        - Control-provider indications extension.  Need to handle enable/disable indications and receive of indications

        - Test indications.

    (*) Removing uneeded source modules.

        (*) Client - Not required

        (*) UserManager 

        (*) ProviderRegistrationManager - Not required without dynamic providers

        (*) ProviderManager2 - Not required without dynamic providers

        (*) Default provider manager.

        (*) Indication Export Server. Not used in any configuriation except HP.

        (*) ProviderRegistrationControlProvider. Not required because no providers registered

        (*) ConfigSettingControlProvider. Not required if we do not have dynamic settings

        (*) UserAuthControlProvider. Can eliminate if there are external means to set user 
	    names and providers

        (*) Managed system providers. Does Fujitsu need them or will they write their own.

    (*) Class reduction (round 2).

    (*) Generalize VxWorks-specific code options.

    (*) Code-reduction.

    (*) Message-catalogue localization.

    (*) CIM_ComputerSystem provider.

    (*) Logging. - Proposed solution is to move to virtual definition of the log serializer and allow the function
	to be defined in the embedded system main. This will allow embedded system developer to define
        any output mechanism for logs.

    (*) Tracing (turned off for now).  It appears that this will be the permanent solution.  The alternative is to
        do the same thing we are going to do with logs, create a callback mechanism whereby the embedded system
        developer can decide what he wants to do with the line output.

    (*) How do we shutdownt the server? Initial conclusion is that we do it through a signal. We could
        develop a function in the CIMServer main that the embedded system provider that defines the signal
        to be used as the starting point for shutdown.

    (*) Get rid of PID file.  - I believe that this is already done. ks

    (*) Remove daeminization code.

