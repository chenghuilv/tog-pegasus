
    ============================================================================

    (A) Formalize embedded-server SDK.

    (A) Logging callback.

    (A) CIMPLE port.

    ============================================================================

    (B) Provider load/terminate operations.

    (B) SSL porting.
    
    (B) Authentication.

    (B) Memory management.
	
	(*) Memory limits.

        (*) Throttling.

    (B) VxWorks 5.5 port.

    (B) Eliminate configuration files dependencies.

    (B) Control-provider indications.

    (B) Generalize VxWorks-specific code options.

    (B) Message-catalogue localization.

    (B) Logging. - Proposed solution is to move to virtual definition of the 
        log serializer and allow the function to be defined in the embedded 
        system main. This will allow embedded system developer to define
        any output mechanism for logs.

    (B) Tracing (turned off for now). It appears that this will be the 
        permanent solution.  The alternative is to do the same thing we are 
        going to do with logs, create a callback mechanism whereby the embedded
        system developer can decide what he wants to do with the line output.

    (B) Shutdown - How do we shutdownt the server? Initial conclusion is that 
        we do it through a signal. We could develop a function in the CIMServer
        main that the embedded system provider that defines the signal to be 
        used as the starting point for shutdown.

    (B) Get rid of PID file.  - I believe that this is already done. ks

    (B) Remove daeminization code.

    ============================================================================

    (C) CIM_ComputerSystem provider.

    (C) Removing unused code.

    (C) Class reduction as cimmofl option.

    (C) Remove unused modules.

        (*) Client - Not required

        (*) UserManager 

        (*) ProviderRegistrationManager - Not required without dynamic providers

        (*) ProviderManager2 - Not required without dynamic providers

        (*) Default provider manager.

        (*) Indication Export Server. Not used in any configuriation except HP.

        (*) ProviderRegistrationControlProvider. Not required because no 
            providers registered

        (*) ConfigSettingControlProvider. Not required if we do not have 
            dynamic settings

        (*) UserAuthControlProvider. Can eliminate if there are external 
            means to set user names and providers

        (*) Managed system providers. Does Fujitsu need them or will they 
            write their own.

